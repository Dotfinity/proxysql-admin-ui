@page "/mysql/queries/digest"

@using ProxysqlAdminUi.Web.Components.Pages.MySql.Rules
@using ProxysqlAdminUi.Web.Repositories
@using ProxysqlAdminUi.Web.ViewModel
@using System.Text.Json;

@attribute [Authorize]

@inject ProxySqlRepository ProxySqlRepository
@inject DialogService DialogService
@inject NotificationService NotificationService
@inject IJSRuntime JSRuntime

<RadzenCard>
    <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H1">MySQL Query Digest Statistics</RadzenText>

    <RadzenDataGrid @ref="_grid"
                    Visible="@_gridVisible"
                    AllowColumnPicking="true"
                    AllowColumnReorder="true"
                    AllowColumnResize="true"
                    AllowFiltering="true"
                    AllowMultiColumnSorting="true"
                    AllowPaging="true"
                    AllowPickAllColumns="true"
                    AllowSorting="true"
                    AllowVirtualization="false"
                    ColumnWidth="auto"
                    Data="@_queryDigests"
                    Density="Density.Default"
                    PageSize="300"
                    ShowColumnTitleAsTooltip="true"
                    TItem="QueryDigestViewModel"
                    PickedColumnsChanged="OnColumnUpdated"
                    >
        <EmptyTemplate>
            <RadzenText TagName="TagName.H3" Text="No data to display" />
        </EmptyTemplate>
        <HeaderTemplate>
            <RadzenButton ButtonStyle="ButtonStyle.Primary" 
                          Icon="refresh" 
                          Text="Refresh Data" 
                          Size="ButtonSize.Medium"
                          Click="async () => await RefreshData()" />
        </HeaderTemplate>
        <Columns>

            <RadzenDataGridColumn TItem="QueryDigestViewModel" Property="@nameof(QueryDigestViewModel.Hostgroup)"
                                  HeaderTooltip="Target server hostgroup" Title="Hostgroup" Filterable="true" Sortable="true" Width="80px" />

            <RadzenDataGridColumn TItem="QueryDigestViewModel" Property="@nameof(QueryDigestViewModel.Schemaname)"
                                  HeaderTooltip="Database schema name" Title="Schema" Filterable="true" Sortable="true"  />

            <RadzenDataGridColumn TItem="QueryDigestViewModel" Property="@nameof(QueryDigestViewModel.Username)"
                                  HeaderTooltip="User executing the queries" Title="Username" Filterable="true" Sortable="true"  />

            <RadzenDataGridColumn TItem="QueryDigestViewModel" Property="@nameof(QueryDigestViewModel.ClientAddress)"
                                  HeaderTooltip="Client IP address" Title="Client Address" Filterable="true" Sortable="true" />

            <RadzenDataGridColumn TItem="QueryDigestViewModel" Property="@nameof(QueryDigestViewModel.Digest)"
                                  HeaderTooltip="Query digest hash" Title="Digest" Filterable="true" Sortable="false" Width="180px"
                                  MinWidth="100px" />

            <RadzenDataGridColumn TItem="QueryDigestViewModel" Property="@nameof(QueryDigestViewModel.DigestText)"
                                  Title="Query" Sortable="false" Width="250px" MinWidth="300px">
                <Template Context="digest">
                    <RadzenButton Size="ButtonSize.Small" Text="@ExtractDigestText(digest)"
                                  Click="async ()=> await ClikShowQueryDialog(digest.DigestText)" />
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="QueryDigestViewModel" Property="@nameof(QueryDigestViewModel.CountStar)"
                                  HeaderTooltip="Total number of times this query pattern was executed" Title="Query Count" Filterable="true"
                                  Sortable="true" />
            
            <RadzenDataGridColumn TItem="QueryDigestViewModel" Property="@nameof(QueryDigestViewModel.CacheHits)"
                                  HeaderTooltip="Total number of times this query pattern was executed" Title="Cache Hits" Filterable="true"
                                  Sortable="true" />
            
            <RadzenDataGridColumn TItem="QueryDigestViewModel" Property="@nameof(QueryDigestViewModel.FirstSeen)"
                                  HeaderTooltip="First time this query pattern was seen" Title="First Seen" Filterable="true" Sortable="true"
                                  >
                <Template Context="digest">
                    @DateTimeOffset.FromUnixTimeSeconds(digest.FirstSeen).LocalDateTime
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="QueryDigestViewModel" Property="@nameof(QueryDigestViewModel.LastSeen)"
                                  HeaderTooltip="Last time this query pattern was seen" Title="Last Seen" Filterable="true" Sortable="true"
                                  >
                <Template Context="digest">
                    @DateTimeOffset.FromUnixTimeSeconds(digest.LastSeen).LocalDateTime
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="QueryDigestViewModel" Property="@nameof(QueryDigestViewModel.SumTime)"
                                  HeaderTooltip="Total execution time in microseconds" Title="Total Time (μs)" Filterable="true"
                                  Sortable="true" />

            <RadzenDataGridColumn TItem="QueryDigestViewModel" Property="@nameof(QueryDigestViewModel.MinTime)"
                                  HeaderTooltip="Minimum query execution time in microseconds" Title="Min Time (μs)" Filterable="true"
                                  Sortable="true" />

            <RadzenDataGridColumn TItem="QueryDigestViewModel" Property="@nameof(QueryDigestViewModel.MaxTime)"
                                  HeaderTooltip="Maximum query execution time in microseconds" Title="Max Time (μs)" Filterable="true"
                                  Sortable="true" />

            <RadzenDataGridColumn TItem="QueryDigestViewModel" Property="@nameof(QueryDigestViewModel.SumRowsAffected)"
                                  HeaderTooltip="Total number of rows affected by this query pattern" Title="Rows Affected" Filterable="true"
                                  Sortable="true" />

            <RadzenDataGridColumn TItem="QueryDigestViewModel" Property="@nameof(QueryDigestViewModel.SumRowsSent)"
                                  HeaderTooltip="Total number of rows returned by this query pattern" Title="Rows Sent" Filterable="true"
                                  Sortable="true" />


            <RadzenDataGridColumn TItem="QueryDigestViewModel" Property="@nameof(QueryDigestViewModel.RuleId)"
                                  HeaderTooltip="Associated routing rule ID if one exists" Title="Rule ID" Filterable="true" Sortable="true"
                                  />

            <RadzenDataGridColumn Property="BtnCol" Filterable="false" Sortable="false" Pickable="false" Width="180px" MinWidth="180px" Visible="true">
                <Template Context="digest">
                    @if (!digest.HasRule)
                    {
                        <RadzenSplitButton Icon="add" ButtonStyle="ButtonStyle.Success" Size="ButtonSize.Small"
                                           Click="async args => await CreateRule(digest.Digest,args)" Text="Create Rule">
                            <ChildContent>
                                <RadzenSplitButtonItem Text="Cache 1 minute" Value="1" />
                                <RadzenSplitButtonItem Text="Cache 5 minutes" Value="5" />
                                <RadzenSplitButtonItem Text="Cache 10 minutes" Value="10" />
                                <RadzenSplitButtonItem Text="Cache 30 minutes" Value="30" />
                                <RadzenSplitButtonItem Text="Cache 1 hour" Value="60" />
                                <RadzenSplitButtonItem Text="Cache 1 day" Value="1440" />
                            </ChildContent>
                        </RadzenSplitButton>
                    }
                    else
                    {
                        <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="edit" Text="Edit Rule" Size="ButtonSize.Small"
                                      Click="async ()=> await EditRule(digest.RuleId.Value)" />
                    }
                </Template>
            </RadzenDataGridColumn>

        </Columns>
    </RadzenDataGrid>
</RadzenCard>

@code {
    
    private RadzenDataGrid<QueryDigestViewModel> _grid;
    private const string COLUMN_SETTINGS_KEY = "queryDigestColumns";
    private bool _gridVisible = false;
    private IEnumerable<QueryDigestViewModel> _queryDigests = new List<QueryDigestViewModel>();
    
    private static readonly List<string> _defaultColumnsVisible =
    [
        nameof(QueryDigestViewModel.Hostgroup),
        nameof(QueryDigestViewModel.Digest),
        nameof(QueryDigestViewModel.DigestText),
        nameof(QueryDigestViewModel.CountStar),
        nameof(QueryDigestViewModel.CacheHits),
        nameof(QueryDigestViewModel.SumTime),
        nameof(QueryDigestViewModel.SumRowsSent)
    ];
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadColumnSettings();
            try
            {
                await RefreshData();
            }
            catch (Exception ex)
            {
                NotificationService.Notify(NotificationSeverity.Error, "Error", 
                    $"Error loading query digests: {ex.Message}");
            }
        }
    }

    private async Task EditRule(int ruleId)
    {
        await DialogService.OpenAsync<EditQueryRuleDialog>("Edit Rule",
        new Dictionary<string, object> { { "RuleId", ruleId } });

        // Refresh data after edit
        await RefreshData();
    }

    private async Task CreateRule(string digest, RadzenSplitButtonItem args)
    {
        await DialogService.OpenAsync<AddQueryRuleDialog>("Create Rule From Digest",
        new Dictionary<string, object>
                  {
                    { "DigestParam", digest },
                    { "Minutes", int.Parse(args?.Value ?? "0")}
                  });

        // Refresh data after creation
        await RefreshData();
    }

    private static string ExtractDigestText(QueryDigestViewModel digest)
    {
        return digest.DigestText.Length > 30 ? digest.DigestText.Substring(0, 30) + "..." : digest.DigestText;
    }

    private async Task ClikShowQueryDialog(string digestText)
    {
        await DialogService.OpenAsync<QueryDigestTextDialog>("Query",
        new Dictionary<string, object> { { "DigestText", digestText } },
        new DialogOptions()
            {
                Resizable = true,
                Draggable = true,
            }
        );
    }

    private async Task RefreshData()
    {
        _queryDigests = await ProxySqlRepository.GetStatsMySqlQueryDigests();
        StateHasChanged();
    }
    
    private async Task OnColumnUpdated(DataGridPickedColumnsChangedEventArgs<QueryDigestViewModel> changedEventArgs)
    {
        if (_grid == null) return;
        
        // Radzen sends the list of selected columns and their visibility
        // but a just picked column is not yet visible, so we should not filter on visibility.
        var visibleColumns = changedEventArgs.Columns 
            .Select(c => c.Property)
            .ToList();
        
        var settings = JsonSerializer.Serialize(visibleColumns);
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", COLUMN_SETTINGS_KEY, settings);
    }
    
    private async Task LoadColumnSettings()
    {
        if (_grid == null) return;

        var visibleColumns = _defaultColumnsVisible;
        
        var settings = await JSRuntime.InvokeAsync<string>("localStorage.getItem", COLUMN_SETTINGS_KEY);
        
        if (!string.IsNullOrEmpty(settings))
        { 
            visibleColumns = JsonSerializer.Deserialize<List<string>>(settings);
        }
        
        foreach (var column in _grid.ColumnsCollection)
        {
            // if the proprty "Visible" is set in the "html" part,
            // then this has no effect on the column visibility.
            var isContained = visibleColumns.Contains(column.Property);
            column.Visible = isContained;
        }

        _gridVisible = true;
        StateHasChanged();
    }
}
